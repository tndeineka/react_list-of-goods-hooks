{"version":3,"sources":["types/SortType.ts","api/goodsFromServer.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Empty","sortType","setSortType","sortReverse","setSortReverse","visibleGoods","goods","reverse","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","getPreparesGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,2EAAAA,K,oBAAAA,E,gBAAAA,E,UAAAA,M,KCAL,IAAMC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,U,OC0BK,IAAMC,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,OAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEMC,EAjCR,SACEC,EACAL,GAEC,IADDM,EACA,wDACMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,GACFC,EAAcD,UAGTC,EAOcQ,CACnBnB,EAAiBI,EAAUE,GAQ7B,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMjB,EAAYN,EAASgB,WACpCK,UAAWG,IAAG,iBACZ,CAAE,WAAYnB,IAAaL,EAASgB,WAJxC,iCASA,wBACEM,KAAK,SACLC,QAAS,kBAAMjB,EAAYN,EAASkB,SACpCG,UAAWG,IAAG,oBACZ,CAAE,WAAYnB,IAAaL,EAASkB,SAJxC,4BASA,wBACEI,KAAK,SACLC,QAAS,kBAAMf,GAAgBD,IAC/Bc,UAAWG,IAAG,oBACZ,CAAE,YAAajB,IAJnB,sBASEF,IAAaL,EAASI,OAASG,IAC/B,wBACEe,KAAK,SACLC,QAtCQ,WAChBjB,EAAYN,EAASI,OACrBI,GAAe,IAqCPa,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC3FjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6bc73337.chunk.js","sourcesContent":["export enum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Empty = '',\n}\n","export const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { SortType } from './types/SortType';\nimport { goodsFromServer } from './api/goodsFromServer';\n\nfunction getPreparesGoods(\n  goods: string[],\n  sortType: SortType,\n  reverse = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Empty);\n  const [sortReverse, setSortReverse] = useState(false);\n\n  const visibleGoods = getPreparesGoods(\n    goodsFromServer, sortType, sortReverse,\n  );\n\n  const resetSort = () => {\n    setSortType(SortType.Empty);\n    setSortReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.Alphabet)}\n          className={cn('button is-info',\n            { 'is-light': sortType !== SortType.Alphabet })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.Length)}\n          className={cn('button is-success',\n            { 'is-light': sortType !== SortType.Length })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortReverse(!sortReverse)}\n          className={cn('button is-warning',\n            { 'is-light': !sortReverse })}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.Empty || sortReverse) && (\n          <button\n            type=\"button\"\n            onClick={resetSort}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}